{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to Key Management System <p>Welcome to Key management system website, this docs will be all the information about key management system related information.</p>"},{"location":"#about-the-project","title":"About the Project","text":"<p>This project is designed to help <code>developers</code> about the architecture of the <code>key management system</code>. It's built using MkDocs, a static site generator that's easy to use and configure. It helps you create beautiful documentation with Markdown.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Check out the documentation for detailed instructions on how to use the project and how does the website work.</p>"},{"location":"#sections","title":"Sections","text":"<ul> <li>Getting started</li> <li>API Documentation</li> </ul>"},{"location":"#contact","title":"Contact","text":"<p>For any questions or suggestions, feel free to reach out to me at godbless.kms.gmail.com.</p> <p>Made with \ud83d\udc99 by NjoxPy</p>"},{"location":"getting_started/","title":"Getting Started","text":"<ul> <li>Into this section there will be guide into how to use api design and the whole system design and architecture.</li> </ul>"},{"location":"getting_started/#sections","title":"Sections","text":"<ul> <li>Functional requirements</li> <li>Non-functional requirements</li> <li>Database design</li> <li>User flow diagram</li> <li>UML Diagram</li> <li>API Documentation and API design</li> </ul>"},{"location":"getting_started/#roadmap","title":"Roadmap","text":"<ul> <li>Roadmap</li> </ul>"},{"location":"getting_started/#notes","title":"Notes","text":"<ul> <li>Each section is divided from the system design overview where by <code>functional requirements</code>, <code>non-functional requirements</code>, <code>API design</code>, <code>database design</code> and <code>user flow diagrams</code>.</li> </ul>"},{"location":"api/api/","title":"Key Management System Documentation","text":""},{"location":"api/api/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Setup &amp; Configuration</li> <li>API Endpoints</li> <li>Venues</li> <li>Users</li> <li>Orders</li> <li>Logs</li> <li>Authentication &amp; Rate Limiting</li> <li>Error Codes and Messages</li> <li>Unit Test Samples</li> <li>Version Information</li> </ul>"},{"location":"api/api/#introduction","title":"Introduction","text":"<p>The Key Management System (KMS) API is designed to help organizations manage key data securely and efficiently. The API provides endpoints for managing users, venues, orders, and logs. It supports only 2 rules <code>(admin and employee)</code> with different levels of access and allows for seamless integration into existing applications.</p> <p>Use this API to streamline key management processes, monitor system activity, and ensure data integrity across all services.</p>"},{"location":"api/api/#setup-configuration","title":"Setup &amp; Configuration","text":""},{"location":"api/api/#prerequisites","title":"Prerequisites","text":"<p>Before using the API, ensure you have the following:</p> <ol> <li>API Access Token: Obtain a token via the authentication process.</li> <li>Dependencies: If needed, install any required dependencies.</li> </ol>"},{"location":"api/api/#authentication","title":"Authentication","text":"<p>To authenticate API requests, pass your bearer token in the request headers. Example:</p> <pre><code>Authorization: Bearer [Your_Token]\nX-RateLimit-Limit: &lt;limit&gt; /&lt;period&gt; (e.g., 10/min)\n</code></pre>"},{"location":"api/api/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/api/#authentication-rate-limiting","title":"Authentication &amp; Rate Limiting","text":"<p>This section details how authentication is handled and any applicable rate limits for API access.</p>"},{"location":"api/api/#authentication_1","title":"Authentication","text":"<p>To authenticate with the API, include the following header in your requests:</p> <pre><code>Authorization: Bearer [Your_Token]\n</code></pre>"},{"location":"api/api/#rate-limiting","title":"Rate Limiting","text":"<p>The API enforces rate limiting to prevent abuse. Example rate limit header:</p> <pre><code>X-RateLimit-Limit: 100/min\nX-RateLimit-Remaining: 99/min\n</code></pre>"},{"location":"api/api/#error-codes-and-messages","title":"Error Codes and Messages","text":"<p>The following error codes may be returned by the API:</p> <ul> <li>400 Bad Request: Invalid input or missing parameters.</li> <li>401 Unauthorized: Missing or invalid authentication token.</li> <li>403 Forbidden: Insufficient permissions to access the resource.</li> <li>404 Not Found: The requested resource could not be found.</li> <li>500 Internal Server Error: A server-side error occurred.</li> </ul>"},{"location":"api/api/#unit-test-samples","title":"Unit Test Samples","text":"<p>Here\u2019s an example of a Python unit test for the <code>/users</code> endpoint using the <code>requests</code> library:</p> <pre><code>import requests\n\ndef test_get_users():\n    response = requests.get(\n        'https://api.example.com/api/v1/users',\n        headers={'Authorization': 'Bearer YOUR_TOKEN'}\n    )\n    assert response.status_code == 200\n    assert len(response.json()) &gt; 0\n</code></pre> <p>example of another test written using express.js</p> <pre><code>import {express} from \"express\"\n\ndescribe.(\"action\", (_id) =&gt; {\n  it('should return new user into the syetm')\n})\n</code></pre>"},{"location":"api/api/#version-information","title":"Version Information","text":"<p>The API supports the following versions:</p> <ul> <li>v1.0: Initial release with basic user and log management functionality.</li> <li>v1.1: Introduced new order management features and improved error handling.</li> </ul> <p>Changelog:</p> Version Date Changes v1.0 2025-02-17 Initial release v1.1 2025-02-01 Added order management and enhanced logging"},{"location":"api/logs/","title":"Logs","text":""},{"location":"api/logs/#log-crud-operations","title":"Log CRUD Operations","text":""},{"location":"api/logs/#1-create-log-post-apiv1logs","title":"1. Create Log - <code>POST /api/v1/logs</code>","text":"<ul> <li> <p>Description: This endpoint allows admins to manually create a log entry for actions performed in the system, such as creating or deleting users, updating venues, etc.</p> </li> <li> <p>Parameters:</p> </li> <li><code>action</code>: The type of action performed (e.g., \"User Created\", \"Venue Updated\", \"User Deleted\").</li> <li><code>userId</code>: The ID of the user who performed the action.</li> <li><code>details</code>: A description of the action performed (optional).</li> <li> <p><code>timestamp</code>: The timestamp of when the action occurred (auto-generated).</p> </li> <li> <p>Request Body:</p> </li> </ul> <pre><code>{\n  \"action\": \"User Created\",\n  \"userId\": \"admin123\",\n  \"details\": \"Admin user created a new employee user account with email godbless.nyagawa@example.com\"\n}\n</code></pre> <ul> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Log created successfully.\",\n  \"data\": {\n    \"_id\": \"log_id_1\",\n    \"action\": \"User Created\",\n    \"userId\": \"admin123\",\n    \"details\": \"Admin user created a new employee user account with email godbless.nyagawa@example.com\",\n    \"timestamp\": \"2025-02-17T12:00:00.000Z\"\n  }\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>201 CREATED: Log successfully created.</li> <li>400 BAD REQUEST: Missing or invalid fields in the request.</li> </ul>"},{"location":"api/logs/#2-get-all-logs-get-apiv1logs","title":"2. Get All Logs - <code>GET /api/v1/logs</code>","text":"<ul> <li> <p>Description: Retrieve a list of all logs in the system.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>[\n  {\n    \"_id\": \"log_id_1\",\n    \"action\": \"User Created\",\n    \"userId\": \"admin123\",\n    \"details\": \"Admin user created a new employee user account with email godbless.nyagawa@example.com\",\n    \"timestamp\": \"2025-02-17T12:00:00.000Z\"\n  },\n  {\n    \"_id\": \"log_id_2\",\n    \"action\": \"Venue Updated\",\n    \"userId\": \"admin123\",\n    \"details\": \"Admin updated the capacity of Conference Hall A to 350\",\n    \"timestamp\": \"2025-02-17T12:05:00.000Z\"\n  }\n]\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Returns the list of logs.</li> <li>204 No Content: If no logs are available.</li> </ul>"},{"location":"api/logs/#3-get-log-by-id-get-apiv1logsid","title":"3. Get Log by ID - <code>GET /api/v1/logs/:id</code>","text":"<ul> <li> <p>Description: Retrieve a specific log by its ID.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"_id\": \"log_id_1\",\n  \"action\": \"User Created\",\n  \"userId\": \"admin123\",\n  \"details\": \"Admin user created a new employee user account with email godbless.nyagawa@example.com\",\n  \"timestamp\": \"2025-02-17T12:00:00.000Z\"\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Returns the log by its ID.</li> <li>404 NOT FOUND: If the log with the given ID is not found.</li> </ul>"},{"location":"api/logs/#4-update-log-put-apiv1logsid","title":"4. Update Log - <code>PUT /api/v1/logs/:id</code>","text":"<ul> <li> <p>Description: Allows an admin to update a specific log entry, though this is less common since logs are typically immutable. This operation might be used for minor corrections or updates (e.g., fixing a typo in the details).</p> </li> <li> <p>Parameters:</p> </li> <li><code>action</code>: The type of action performed (optional).</li> <li><code>userId</code>: The ID of the user who performed the action (optional).</li> <li> <p><code>details</code>: A description of the action performed (optional).</p> </li> <li> <p>Request Body:</p> </li> </ul> <pre><code>{\n  \"details\": \"Admin user created a new employee user account with email jane.smith@example.com\"\n}\n</code></pre> <ul> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Log updated successfully.\",\n  \"data\": {\n    \"_id\": \"log_id_1\",\n    \"action\": \"User Created\",\n    \"userId\": \"admin123\",\n    \"details\": \"Admin user created a new employee user account with email jane.smith@example.com\",\n    \"timestamp\": \"2025-02-17T12:00:00.000Z\"\n  }\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Log successfully updated.</li> <li>404 NOT FOUND: If the log with the given ID does not exist.</li> <li>400 BAD REQUEST: If any invalid data is passed.</li> </ul>"},{"location":"api/logs/#5-delete-log-delete-apiv1logsid","title":"5. Delete Log - <code>DELETE /api/v1/logs/:id</code>","text":"<ul> <li> <p>Description: Allows an admin to delete a specific log by its ID. However, logs are typically kept for auditing purposes and may not be deleted in some systems.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Log deleted successfully.\"\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Log successfully deleted.</li> <li>404 NOT FOUND: If the log with the given ID is not found.</li> </ul>"},{"location":"api/logs/#6-get-total-log-count-get-apiv1logs-total","title":"6. Get Total Log Count - <code>GET /api/v1/logs-total</code>","text":"<ul> <li> <p>Description: Retrieves the total number of logs in the system.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"totalCount\": 10\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Successfully returns the total count of logs.</li> <li>204 No Content: If no logs exist.</li> </ul>"},{"location":"api/logs/#example-flow-for-log-operations","title":"Example Flow for Log Operations:","text":"<ol> <li>Admin creates a log entry:</li> <li>POST <code>/api/v1/logs</code> with the action details.</li> <li> <p>Response: Log entry created successfully.</p> </li> <li> <p>Get all logs:</p> </li> <li>GET <code>/api/v1/logs</code>.</li> <li> <p>Response: List of all logs.</p> </li> <li> <p>Get a specific log:</p> </li> <li>GET <code>/api/v1/logs/:id</code>.</li> <li> <p>Response: Details of the log.</p> </li> <li> <p>Update a log:</p> </li> <li>PUT <code>/api/v1/logs/:id</code> with updated details.</li> <li> <p>Response: Log updated successfully.</p> </li> <li> <p>Delete a log:</p> </li> <li>DELETE <code>/api/v1/logs/:id</code>.</li> <li> <p>Response: Log deleted successfully.</p> </li> <li> <p>Get total log count:</p> </li> <li>GET <code>/api/v1/logs-total</code>.</li> <li>Response: Returns the total count of logs.</li> </ol>"},{"location":"api/logs/#security-validation-notes","title":"Security &amp; Validation Notes","text":"<ul> <li>Make sure to authenticate and authorize the user making the request to access the logs, especially when dealing with log management.</li> <li>Logs should generally not be altered once created, so consider limiting update and delete operations to admins only.</li> <li>Consider adding additional filters for log retrieval, like filtering by user, action type, or time range to make logs more useful.</li> </ul>"},{"location":"api/orders/","title":"Order CRUD Operations","text":""},{"location":"api/orders/#1-create-order-post-apiv1orders","title":"1. Create Order - <code>POST /api/v1/orders</code>","text":"<ul> <li> <p>Description: Allows a user to create an order for a venue, where the user selects a venue and books it with a given date and time.</p> </li> <li> <p>Parameters:</p> </li> <li><code>venueId</code>: ID of the venue being booked.</li> <li><code>userId</code>: ID of the user making the booking.</li> <li><code>bookingDate</code>: The date and time the venue is booked for.</li> <li> <p><code>status</code>: The status of the order (e.g., <code>pending</code>, <code>confirmed</code>).</p> </li> <li> <p>Request Body:</p> </li> </ul> <pre><code>{\n  \"venueId\": \"venue123\",\n  \"userId\": \"user456\",\n  \"bookingDate\": \"2025-03-10T10:00:00Z\",\n  \"status\": \"pending\"\n}\n</code></pre> <ul> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Order created successfully.\",\n  \"data\": {\n    \"_id\": \"order123\",\n    \"venueId\": \"venue123\",\n    \"userId\": \"user456\",\n    \"bookingDate\": \"2025-03-10T10:00:00Z\",\n    \"status\": \"pending\",\n    \"createdAt\": \"2025-02-17T10:00:00Z\",\n    \"updatedAt\": \"2025-02-17T10:00:00Z\"\n  }\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>201 CREATED: Order successfully created.</li> <li>400 BAD REQUEST: If any required fields are missing or invalid (e.g., missing <code>venueId</code> or <code>bookingDate</code>).</li> <li>404 NOT FOUND: If <code>venueId</code> or <code>userId</code> does not exist.</li> </ul>"},{"location":"api/orders/#2-get-all-orders-get-apiv1orders","title":"2. Get All Orders - <code>GET /api/v1/orders</code>","text":"<ul> <li> <p>Description: Retrieves a list of all orders in the system.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>[\n  {\n    \"_id\": \"order123\",\n    \"venueId\": \"venue123\",\n    \"userId\": \"user456\",\n    \"bookingDate\": \"2025-03-10T10:00:00Z\",\n    \"status\": \"pending\",\n    \"createdAt\": \"2025-02-17T10:00:00Z\",\n    \"updatedAt\": \"2025-02-17T10:00:00Z\"\n  },\n  {\n    \"_id\": \"order124\",\n    \"venueId\": \"venue124\",\n    \"userId\": \"user457\",\n    \"bookingDate\": \"2025-03-15T14:00:00Z\",\n    \"status\": \"confirmed\",\n    \"createdAt\": \"2025-02-18T10:15:00Z\",\n    \"updatedAt\": \"2025-02-18T10:15:00Z\"\n  }\n]\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Returns a list of all orders.</li> <li>204 No Content: If no orders are found.</li> </ul>"},{"location":"api/orders/#3-get-order-by-id-get-apiv1ordersid","title":"3. Get Order by ID - <code>GET /api/v1/orders/:id</code>","text":"<ul> <li> <p>Description: Retrieves a specific order by its ID.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"_id\": \"order123\",\n  \"venueId\": \"venue123\",\n  \"userId\": \"user456\",\n  \"bookingDate\": \"2025-03-10T10:00:00Z\",\n  \"status\": \"pending\",\n  \"createdAt\": \"2025-02-17T10:00:00Z\",\n  \"updatedAt\": \"2025-02-17T10:00:00Z\"\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Returns the order by ID.</li> <li>404 NOT FOUND: If the order is not found.</li> </ul>"},{"location":"api/orders/#4-update-order-put-apiv1ordersid","title":"4. Update Order - <code>PUT /api/v1/orders/:id</code>","text":"<ul> <li> <p>Description: Allows an admin to update the details of an existing order.</p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>status</code>: The updated status of the order (e.g., <code>pending</code>, <code>confirmed</code>).</p> </li> <li> <p>Request Body:</p> </li> </ul> <pre><code>{\n  \"status\": \"confirmed\"\n}\n</code></pre> <ul> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Order updated successfully.\",\n  \"data\": {\n    \"_id\": \"order123\",\n    \"venueId\": \"venue123\",\n    \"userId\": \"user456\",\n    \"bookingDate\": \"2025-03-10T10:00:00Z\",\n    \"status\": \"confirmed\",\n    \"createdAt\": \"2025-02-17T10:00:00Z\",\n    \"updatedAt\": \"2025-02-17T11:00:00Z\"\n  }\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Order successfully updated.</li> <li>404 NOT FOUND: If the order with the given ID does not exist.</li> </ul>"},{"location":"api/orders/#5-delete-order-delete-apiv1ordersid","title":"5. Delete Order - <code>DELETE /api/v1/orders/:id</code>","text":"<ul> <li> <p>Description: Allows an admin to delete a specific order by its ID.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Order deleted successfully.\"\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Order successfully deleted.</li> <li>404 NOT FOUND: If the order with the given ID does not exist.</li> </ul>"},{"location":"api/orders/#6-get-total-order-count-get-apiv1orders-total","title":"6. Get Total Order Count - <code>GET /api/v1/orders-total</code>","text":"<ul> <li> <p>Description: Retrieves the total number of orders in the system.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"totalCount\": 10\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Successfully returns the total count of orders.</li> <li>204 No Content: If no orders exist, the count will be zero.</li> </ul>"},{"location":"api/orders/#example-flow-for-order-operations","title":"Example Flow for Order Operations","text":"<ol> <li>Create an order:</li> <li>POST <code>/api/v1/orders</code> with venue and user details.</li> <li> <p>Response: Order created successfully.</p> </li> <li> <p>Get all orders:</p> </li> <li>GET <code>/api/v1/orders</code>.</li> <li> <p>Response: List of all orders.</p> </li> <li> <p>Get a specific order:</p> </li> <li>GET <code>/api/v1/orders/:id</code>.</li> <li> <p>Response: Details of the order.</p> </li> <li> <p>Update an order:</p> </li> <li>PUT <code>/api/v1/orders/:id</code> with updated order status.</li> <li> <p>Response: Order updated successfully.</p> </li> <li> <p>Delete an order:</p> </li> <li>DELETE <code>/api/v1/orders/:id</code>.</li> <li> <p>Response: Order deleted successfully.</p> </li> <li> <p>Get total order count:</p> </li> <li>GET <code>/api/v1/orders-total</code>.</li> <li>Response: Returns the total count of orders.</li> </ol>"},{"location":"api/orders/#security-validation-notes","title":"Security &amp; Validation Notes","text":"<ul> <li>Ensure only authenticated users can create orders.</li> <li>Admin users should be the only ones who can update or delete orders.</li> <li>Ensure proper validation on <code>bookingDate</code> and <code>status</code> fields for correct values.</li> </ul>"},{"location":"api/user/","title":"Users","text":""},{"location":"api/user/#1-get-apiv1users-retrieve-list-of-users","title":"1. GET <code>/api/v1/users</code> - Retrieve List of Users","text":"<ul> <li> <p>Description: Retrieves a list of users. Only users with the <code>admin</code> role can access this endpoint.</p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>userId</code>: The <code>userId</code> of the admin requesting the list (for authentication purposes).</p> </li> <li> <p>Response:</p> </li> <li>200 OK: Returns a list of users.</li> <li>204 No Content: If no users exist.</li> </ul> <pre><code>[\n    {\n        \"_id\": \"67a4446de92db4382674a191\",\n        \"first-name\": \"John\",\n        \"last-name\": \"Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"registration-number\": \"2025-XYZ-001\",\n        \"password\": \"$2b$12$Eey1nYadEpnB8vgSwqy0CeIAk4kFIlJbrMIq9gw99L9rm3uFYsYpa\",\n        \"role\": \"admin\",\n        \"createdAt\": \"2025-02-06T05:11:09.134Z\",\n        \"updatedAt\": \"2025-02-06T05:11:09.134Z\",\n        \"__v\": 0\n    },\n    {\n        \"_id\": \"679ba6de6b93229d8e7e7652\",\n        \"first-name\": \"Jane\",\n        \"last-name\": \"Smith\",\n        \"email\": \"jane.smith@example.com\",\n        \"registration-number\": \"2025-XYZ-002\",\n        \"password\": \"$2b$12$wj11pDmdprRgE974f6q63OkmXCunTsg0VlRKW5jAjQ.NGtBN8csf.\",\n        \"role\": \"employee\",\n        \"createdAt\": \"2025-01-30T16:20:46.445Z\",\n        \"updatedAt\": \"2025-02-02T07:40:30.390Z\",\n        \"__v\": 0\n    }\n]\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: List of users returned successfully.</li> <li>204 No Content: No users found.</li> </ul>"},{"location":"api/user/#2-post-apiv1users-create-new-user","title":"2. POST <code>/api/v1/users</code> - Create New User","text":"<ul> <li> <p>Description: Adds a new user to the system. An admin is required to enter details such as <code>first-name</code>, <code>last-name</code>, <code>email</code>, <code>registration number</code>, and <code>password</code>. Passwords must be securely hashed using bcrypt before storing.</p> </li> <li> <p>Parameters:</p> </li> <li><code>first-name</code>: The user\u2019s first name.</li> <li><code>last-name</code>: The user\u2019s last name.</li> <li><code>email</code>: The user\u2019s email address.</li> <li><code>registration-number</code>: A unique registration number.</li> <li><code>password</code>: A secure password for the user.</li> <li> <p><code>role</code>: The user\u2019s role, which should either be <code>admin</code> or <code>employee</code>.</p> </li> <li> <p>Request Body:</p> </li> </ul> <pre><code>{\n  \"first-name\": \"Njox\",\n  \"last-name\": \"Nyagawa\",\n  \"email\": \"njox@gmail.com\",\n  \"registration-number\": \"22123333\",\n  \"password\": \"password_here\",\n  \"role\": \"admin\"\n}\n</code></pre> <ul> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"User account created successfully.\",\n  \"data\": {\n    \"first_name\": \"Njox\",\n    \"last_name\": \"Nyagawa\",\n    \"email\": \"njox@gmail.com\",\n    \"registration_number\": \"22123333\",\n    \"token\": \"generated_jwt_token_here\"\n  }\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>201 CREATED: User created successfully.</li> <li>400 BAD REQUEST: Missing or invalid fields (e.g., missing <code>first-name</code>, invalid <code>role</code>).</li> <li>401 UNAUTHORIZED: User does not have <code>admin</code> role.</li> </ul>"},{"location":"api/user/#3-get-apiv1users-total-get-total-number-of-users","title":"3. GET <code>/api/v1/users-total</code> - Get Total Number of Users","text":"<ul> <li> <p>Description: Retrieves the total number of users on the website.</p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>userId</code>: The <code>userId</code> of the admin requesting the list (for authentication).</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"totalCount\": 5\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Total user count returned.</li> <li>204 No Content: No users found (count = 0).</li> </ul>"},{"location":"api/user/#4-get-apiv1usersid-retrieve-user-by-id","title":"4. GET <code>/api/v1/users/:id</code> - Retrieve User by ID","text":"<ul> <li> <p>Description: Retrieves a specific user by their <code>id</code>.</p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>userId</code>: The <code>userId</code> of the admin requesting the user information (for authentication).</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"_id\": \"67a4446de92db4382674a191\",\n  \"first-name\": \"John\",\n  \"last-name\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"registration-number\": \"2025-XYZ-001\",\n  \"password\": \"$2b$12$Eey1nYadEpnB8vgSwqy0CeIAk4kFIlJbrMIq9gw99L9rm3uFYsYpa\",\n  \"role\": \"admin\",\n  \"createdAt\": \"2025-02-06T05:11:09.134Z\",\n  \"updatedAt\": \"2025-02-06T05:11:09.134Z\",\n  \"__v\": 0\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: Returns user details by <code>id</code>.</li> <li>404 NOT FOUND: User not found.</li> </ul>"},{"location":"api/user/#5-put-apiv1usersid-update-user-details","title":"5. PUT <code>/api/v1/users/:id</code> - Update User Details","text":"<ul> <li> <p>Description: Updates a user\u2019s details by <code>id</code>. This includes fields like <code>first-name</code>, <code>last-name</code>, <code>email</code>, <code>registration-number</code>, <code>password</code>, and <code>role</code>.</p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>userId</code>: The <code>userId</code> of the admin requesting the update (for authentication).</p> </li> <li> <p>Request Body:</p> </li> </ul> <pre><code>{\n  \"first-name\": \"John\",\n  \"last-name\": \"Doe\",\n  \"email\": \"john.doe@newdomain.com\",\n  \"registration-number\": \"2025-XYZ-001\",\n  \"password\": \"newpassword_here\",\n  \"role\": \"employee\"\n}\n</code></pre> <ul> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"User details updated successfully.\",\n  \"data\": {\n    \"_id\": \"67a4446de92db4382674a191\",\n    \"first-name\": \"John\",\n    \"last-name\": \"Doe\",\n    \"email\": \"john.doe@newdomain.com\",\n    \"registration-number\": \"2025-XYZ-001\",\n    \"password\": \"$2b$12$Eey1nYadEpnB8vgSwqy0CeIAk4kFIlJbrMIq9gw99L9rm3uFYsYpa\",\n    \"role\": \"employee\",\n    \"createdAt\": \"2025-02-06T05:11:09.134Z\",\n    \"updatedAt\": \"2025-02-06T05:11:09.134Z\"\n  }\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: User updated successfully.</li> <li>404 NOT FOUND: User not found.</li> </ul>"},{"location":"api/user/#6-delete-apiv1usersid-delete-user-by-id","title":"6. DELETE <code>/api/v1/users/:id</code> - Delete User by ID","text":"<ul> <li> <p>Description: Deletes a user by their <code>id</code>.</p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>userId</code>: The <code>userId</code> of the admin requesting the deletion (for authentication).</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"User deleted successfully.\"\n}\n</code></pre> <ul> <li>Response Codes:</li> <li>200 OK: User deleted successfully.</li> <li>404 NOT FOUND: User not found.</li> </ul>"},{"location":"api/user/#security-notes","title":"Security Notes","text":"<ul> <li>Always hash the passwords using a secure hashing algorithm like bcrypt before storing them in the database.</li> <li>Never return sensitive data, such as passwords, in API responses.</li> <li>Ensure role-based access control (RBAC) is implemented, allowing only users with the <code>admin</code> role to access endpoints for creating, updating, or deleting users.</li> </ul>"},{"location":"api/venue/","title":"Venues","text":""},{"location":"api/venue/#venue-model","title":"\ud83d\udccd Venue Model","text":"<ul> <li>name: Name of the venue (e.g., Auditorium A)</li> <li>block: Block or area where the venue is located (e.g., Block A)</li> <li>capacity: Maximum capacity of people the venue can hold (e.g., 200 people)</li> <li>abbreviation: Abbreviation for the venue (e.g., NLH4)</li> <li>images: Array of image URLs (or file paths) representing the venue.</li> <li>status: Status of the venue (can be \"booked\", \"available\", or \"pending\").</li> </ul>"},{"location":"api/venue/#updated-crud-endpoints","title":"Updated CRUD Endpoints","text":""},{"location":"api/venue/#1-get-apiv1venues-get-all-venues","title":"1. GET <code>/api/v1/venues</code> - Get All Venues","text":"<ul> <li> <p>Description: Retrieves a list of all venues.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>[\n  {\n    \"_id\": \"venue123\",\n    \"name\": \"Auditorium A\",\n    \"block\": \"Block A\",\n    \"capacity\": 200,\n    \"abbreviation\": \"NLH4\",\n    \"images\": [\n      \"https://example.com/image1.jpg\",\n      \"https://example.com/image2.jpg\"\n    ],\n    \"createdAt\": \"2025-02-17T10:00:00Z\",\n    \"updatedAt\": \"2025-02-17T10:00:00Z\",\n    \"status\": \"booked\"\n  },\n  {\n    \"_id\": \"venue124\",\n    \"name\": \"Conference Room 1\",\n    \"block\": \"Block B\",\n    \"capacity\": 50,\n    \"abbreviation\": \"CR1\",\n    \"images\": [\n      \"https://example.com/image3.jpg\"\n    ],\n    \"createdAt\": \"2025-02-16T14:30:00Z\",\n    \"updatedAt\": \"2025-02-16T14:30:00Z\"\n  }\n]\n</code></pre>"},{"location":"api/venue/#2-post-apiv1venues-create-new-venue","title":"2. POST <code>/api/v1/venues</code> - Create New Venue","text":"<ul> <li> <p>Description: Adds a new venue to the system. Admins must provide <code>name</code>, <code>block</code>, <code>capacity</code>, <code>abbreviation</code>, and optional <code>images</code> array.</p> </li> <li> <p>Request Body:</p> </li> </ul> <pre><code>{\n  \"name\": \"Auditorium B\",\n  \"block\": \"Block C\",\n  \"userId\": \"w3eegcr5er14qere4r\",\n  \"abbreviation\": \"NLH4\",\n  \"status\": \"booked\",\n  \"capacity\": 300,\n  \"images\": [\n    \"https://example.com/venue-image1.jpg\",\n    \"https://example.com/venue-image2.jpg\"\n  ]\n}\n</code></pre> <ul> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Venue created successfully.\",\n  \"data\": {\n    \"_id\": \"venue125\",\n    \"name\": \"Auditorium B\",\n    \"status\": \"booked\",\n    \"block\": \"Block C\",\n    \"abbreviation\": \"NLH4\",\n    \"capacity\": 300,\n    \"images\": [\n      \"https://example.com/venue-image1.jpg\",\n      \"https://example.com/venue-image2.jpg\"\n    ],\n    \"createdAt\": \"2025-02-17T15:00:00Z\",\n    \"updatedAt\": \"2025-02-17T15:00:00Z\"\n  }\n}\n</code></pre>"},{"location":"api/venue/#3-get-apiv1venuesid-get-venue-by-id","title":"3. GET <code>/api/v1/venues/:id</code> - Get Venue by ID","text":"<ul> <li> <p>Description: Retrieves a specific venue by its <code>id</code>.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"_id\": \"venue123\",\n  \"name\": \"Auditorium A\",\n  \"block\": \"Block A\",\n  \"capacity\": 200,\n  \"status\": \"booked\",\n  \"abbreviation\": \"NLH4\",\n  \"images\": [\n    \"https://example.com/image1.jpg\",\n    \"https://example.com/image2.jpg\"\n  ],\n  \"createdAt\": \"2025-02-17T10:00:00Z\",\n  \"updatedAt\": \"2025-02-17T10:00:00Z\"\n}\n</code></pre>"},{"location":"api/venue/#4-put-apiv1venuesid-update-venue-by-id","title":"4. PUT <code>/api/v1/venues/:id</code> - Update Venue by ID","text":"<ul> <li> <p>Description: Updates the details of an existing venue by its <code>id</code>. Updates can include the <code>name</code>, <code>block</code>, <code>capacity</code>, <code>abbreviation</code>, and <code>images</code>.</p> </li> <li> <p>Request Body:</p> </li> </ul> <pre><code>{\n  \"name\": \"Updated Auditorium A\",\n  \"block\": \"Block A\",\n  \"capacity\": 250,\n  \"abbreviation\": \"NLH5\",\n  \"images\": [\n    \"https://example.com/updated-image1.jpg\"\n  ]\n}\n</code></pre> <ul> <li>Response:</li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Venue updated successfully.\",\n  \"data\": {\n    \"_id\": \"venue123\",\n    \"name\": \"Updated Auditorium A\",\n    \"block\": \"Block A\",\n    \"capacity\": 250,\n    \"abbreviation\": \"NLH5\",\n    \"images\": [\n      \"https://example.com/updated-image1.jpg\"\n    ],\n    \"createdAt\": \"2025-02-17T10:00:00Z\",\n    \"updatedAt\": \"2025-02-17T16:00:00Z\"\n  }\n}\n</code></pre>"},{"location":"api/venue/#5-delete-apiv1venuesid-delete-venue-by-id","title":"5. DELETE <code>/api/v1/venues/:id</code> - Delete Venue by ID","text":"<ul> <li> <p>Description: Deletes a specific venue by its <code>id</code>.</p> </li> <li> <p>Response:</p> </li> </ul> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Venue deleted successfully.\"\n}\n</code></pre>"},{"location":"api/venue/#security-notes","title":"\ud83d\udd10 Security Notes","text":"<ul> <li>Ensure only users with an <code>admin</code> role can access the POST, PUT, and DELETE endpoints for venues.</li> <li>Always validate input parameters for <code>capacity</code>, <code>name</code>, <code>block</code>, and <code>abbreviation</code> to ensure correctness.</li> <li>For the <code>images</code> field, you can store URLs or use a file upload mechanism, depending on your setup.</li> </ul>"},{"location":"api/venue/#example-venue-data","title":"\ud83d\udccc Example Venue Data","text":"<pre><code>{\n  \"_id\": \"venue123\",\n  \"name\": \"Auditorium A\",\n  \"block\": \"Block A\",\n  \"capacity\": 200,\n  \"abbreviation\": \"NLH4\",\n  \"images\": [\n    \"https://example.com/image1.jpg\",\n    \"https://example.com/image2.jpg\"\n  ],\n  \"createdAt\": \"2025-02-17T10:00:00Z\",\n  \"updatedAt\": \"2025-02-17T10:00:00Z\"\n}\n</code></pre>"},{"location":"api/roadmap/roadmap/","title":"Roadmap","text":""},{"location":"api/roadmap/roadmap/#saas-project-roadmap-feb-18-march-18-2025","title":"\ud83d\ude80 SaaS Project Roadmap (Feb 18 - March 18, 2025)","text":"<p>This roadmap ensures your SaaS is designed, built, tested, and deployed within one month.  </p>"},{"location":"api/roadmap/roadmap/#week-1-system-design-uiux-planning-feb-18-feb-24","title":"\ud83d\udd39 Week 1: System Design &amp; UI/UX Planning (Feb 18 - Feb 24)","text":"<p>\u2705 Feb 18-19: Define Core Features (MVP) </p> <ul> <li>List out the essential features for the first version.  </li> <li>Identify user roles (admin, normal users).  </li> <li>Sketch basic user flow diagrams.  </li> </ul> <p>\u2705 Feb 20: System Architecture &amp; Database Design </p> <ul> <li>Plan API structure (REST endpoints).  </li> <li>Design MongoDB collections &amp; schema.  </li> <li>Choose backend structure (monolith vs. microservices).  </li> </ul> <p>\u2705 Feb 21-22: UI/UX Design in Adobe XD </p> <ul> <li>Set up design system (colors, typography, spacing).  </li> <li>Create wireframes &amp; mockups for key pages.  </li> <li>Ensure mobile responsiveness in the design.  </li> </ul> <p>\u2705 Feb 23-24: Project Setup &amp; Repo Structure </p> <ul> <li>Initialize GitHub repo &amp; set up <code>.gitignore</code>.  </li> <li>Set up Express.js backend with MongoDB connection.  </li> <li>Initialize React + Tailwind frontend.  </li> <li>Set up MkDocs for documentation.  </li> </ul>"},{"location":"api/roadmap/roadmap/#week-2-backend-development-feb-25-march-2","title":"\ud83d\udd39 Week 2: Backend Development (Feb 25 - March 2)","text":"<p>\u2705 Feb 25-26: User Authentication (JWT-based) </p> <ul> <li>Implement user registration &amp; login APIs.  </li> <li>Hash passwords using <code>bcryptjs</code>.  </li> <li>Secure routes with JWT authentication.  </li> <li>Store tokens in httpOnly cookies.  </li> </ul> <p>\u2705 Feb 27-28: Develop Core API Endpoints </p> <ul> <li>Create CRUD APIs for main features.  </li> <li>Implement pagination, filtering, sorting if needed.  </li> <li>Add role-based access control (RBAC) if required.  </li> </ul> <p>\u2705 March 1: Middleware &amp; Security Enhancements </p> <ul> <li>Implement error handling &amp; logging (Winston, Morgan).  </li> <li>Add rate limiting &amp; CORS policies.  </li> </ul> <p>\u2705 March 2: API Testing &amp; Refinements </p> <ul> <li>Test all API endpoints using Postman or Thunder Client.  </li> <li>Fix bugs &amp; optimize performance.  </li> </ul>"},{"location":"api/roadmap/roadmap/#week-3-frontend-development-march-3-march-9","title":"\ud83d\udd39 Week 3: Frontend Development (March 3 - March 9)","text":"<p>\u2705 March 3-4: Authentication UI (Login, Register, Logout) </p> <ul> <li>Create React authentication pages.  </li> <li>Connect frontend to backend auth APIs.  </li> <li>Handle JWT securely with cookies.  </li> </ul> <p>\u2705 March 5-6: Dashboard &amp; Core Pages UI </p> <ul> <li>Develop the main dashboard layout.  </li> <li>Fetch and display user data from APIs.  </li> <li>Implement loading states &amp; error handling.  </li> </ul> <p>\u2705 March 7-8: UI Enhancements &amp; API Integration </p> <ul> <li>Implement global state management (Context API).  </li> <li>Add animations &amp; UI improvements.  </li> <li>Make sure UI is fully responsive.  </li> </ul> <p>\u2705 March 9: Frontend Testing &amp; Optimization </p> <ul> <li>Test all pages and fix UI bugs.  </li> <li>Optimize performance (lazy loading, reducing re-renders).  </li> </ul>"},{"location":"api/roadmap/roadmap/#week-4-final-touches-deployment-documentation-march-10-march-18","title":"\ud83d\udd39 Week 4: Final Touches, Deployment &amp; Documentation (March 10 - March 18)","text":"<p>\u2705 March 10-11: Backend Deployment on Railway </p> <ul> <li>Push backend to GitHub.  </li> <li>Deploy Express.js &amp; MongoDB on Railway.  </li> <li>Configure environment variables (JWT_SECRET, DB_URI).  </li> </ul> <p>\u2705 March 12-13: Frontend Deployment on Vercel/Netlify </p> <ul> <li>Build React frontend (<code>npm run build</code>).  </li> <li>Deploy to Vercel or Netlify.  </li> </ul> <p>\u2705 March 14-15: Final Testing (End-to-End) </p> <ul> <li>Test full user journey (register \u2192 login \u2192 dashboard).  </li> <li>Fix any UI/API integration issues.  </li> <li>Perform security checks (JWT expiration, API protection).  </li> </ul> <p>\u2705 March 16-17: Documentation (MkDocs + README.md) </p> <ul> <li>Document API endpoints (methods, request &amp; response formats).  </li> <li>Write a simple setup guide for future developers.  </li> <li>Add FAQ section if necessary.  </li> </ul> <p>\u2705 March 18: Launch &amp; Get Feedback \ud83d\ude80 </p> <ul> <li>Announce your SaaS launch!  </li> <li>Gather feedback from early users.  </li> <li>Identify potential improvements &amp; next steps.  </li> </ul>"},{"location":"api/roadmap/roadmap/#summary-timeline","title":"\ud83c\udfaf Summary Timeline","text":"<p>\ud83d\uddd3 Feb 18-24: System Design, UI/UX Planning &amp; Project Setup \ud83d\uddd3 Feb 25 - March 2: Backend Development (Auth, APIs, Security) \ud83d\uddd3 March 3-9: Frontend Development (UI, API Integration) \ud83d\uddd3 March 10-18: Deployment, Testing &amp; Documentation  </p> <p>\ud83d\ude80 By March 18, your SaaS should be fully functional &amp; live! \ud83c\udf89  </p> <p>Let me know if you want to tweak the roadmap! \ud83d\udd25</p>"},{"location":"system%20design/database-design/","title":"\ud83d\udcda Database Design Documentation","text":""},{"location":"system%20design/database-design/#overview","title":"Overview","text":"<p>This section provides an overview of the database design for the system, outlining the entities and their relationships within the system, along with the schema definitions.</p> <p></p>"},{"location":"system%20design/database-design/#entities","title":"\ud83d\udccc Entities","text":"<p>The system comprises the following core entities:</p> Entity Description Venue Stores venue information, such as name, block, capacity, equipment, images, status, and abbreviation. Users Represents the registered users, with attributes like first name, last name, email, registration number, course, phone number, and role (employee/admin). Order Contains the details of the venue bookings, including the venue info (name, block, capacity, equipment, images, status), along with the user ID who made the booking. Logs Logs user actions in the system, captured using a logging package (e.g., Winston) rather than a model."},{"location":"system%20design/database-design/#define-schema-design","title":"\ud83d\udccc Define Schema Design","text":"<p>This section outlines the schema design for each entity in the database:</p>"},{"location":"system%20design/database-design/#1-venue-schema","title":"1\ufe0f\u20e3 Venue Schema","text":"<p>The Venue entity will store details about each venue in the system.</p> <pre><code>{\n  \"_id\": ObjectId(\"...\"),\n  \"name\": \"Conference Room A\",\n  \"block\": \"B\",\n  \"capacity\": 100,\n  \"equipment\": [\"Projector\", \"Speakers\"],\n  \"images\": [\"image1.jpg\", \"image2.jpg\"],\n  \"status\": \"available\",  // booked, available, etc.\n  \"abbreviation\": \"CRA\",\n  \"createdAt\": ISODate(\"2025-02-20T12:00:00Z\"),\n  \"updatedAt\": ISODate(\"2025-02-20T12:00:00Z\")\n}\n</code></pre>"},{"location":"system%20design/database-design/#2-users-schema","title":"2\ufe0f\u20e3 Users Schema","text":"<p>The Users entity captures information about the users of the system, including their personal details and role.</p> <pre><code>{\n  \"_id\": ObjectId(\"...\"),\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"registrationNumber\": \"12345\",\n  \"course\": \"Computer Science\",\n  \"phoneNumber\": \"123-456-7890\",\n  \"role\": \"employee\",  // admin or employee\n  \"createdAt\": ISODate(\"2025-02-20T12:00:00Z\"),\n  \"updatedAt\": ISODate(\"2025-02-20T12:00:00Z\")\n}\n</code></pre>"},{"location":"system%20design/database-design/#3-order-schema","title":"3\ufe0f\u20e3 Order Schema","text":"<p>The Order schema links a user to a venue booking, with details about the venue and booking status.</p> <pre><code>{\n  \"_id\": ObjectId(\"...\"),\n  \"venueId\": ObjectId(\"...\"),  // Reference to the Venue document\n  \"userId\": ObjectId(\"...\"),  // Reference to the User document\n  \"status\": \"booked\",  // booked, cancelled, pending\n  \"bookingDate\": ISODate(\"2025-02-20T14:00:00Z\"),\n  \"createdAt\": ISODate(\"2025-02-20T12:00:00Z\"),\n  \"updatedAt\": ISODate(\"2025-02-20T12:00:00Z\")\n}\n</code></pre>"},{"location":"system%20design/database-design/#4-logs-schema","title":"4\ufe0f\u20e3 Logs Schema","text":"<p>For logging user activities, you\u2019ll be using the Winston package for logging. Instead of a database schema, logs will be handled by Winston and stored in files or a centralized logging service.</p>"},{"location":"system%20design/database-design/#note","title":"Note:","text":"<p>For logging purposes, we will not use a database model but will rely on Winston for capturing logs. The logs will be stored in files or integrated with services like AWS CloudWatch, Loggly, or Elasticsearch for easier searching and monitoring.</p>"},{"location":"system%20design/database-design/#relationships-between-entities","title":"\ud83d\udccc Relationships Between Entities","text":"<ul> <li>Users can have many Orders (One-to-Many relationship).</li> <li>Orders reference a Venue (Many-to-One relationship).</li> <li>Venue can be linked to multiple Orders, but each order is for one venue.</li> </ul>"},{"location":"system%20design/database-design/#schema-considerations-constraints","title":"\ud83d\udccc Schema Considerations &amp; Constraints","text":"<ul> <li>Data Validation: </li> <li>Ensure that fields like <code>email</code>, <code>phone number</code>, and <code>registration number</code> are unique.</li> <li> <p>Validate <code>status</code> fields to restrict them to specific values (e.g., <code>booked</code>, <code>available</code>).</p> </li> <li> <p>Soft Deletes: </p> </li> <li> <p>Instead of hard-deleting, consider adding an <code>isDeleted</code> field to mark entities for deletion (e.g., in the User schema).</p> </li> <li> <p>Indexes: </p> </li> <li>Create indexes for frequently queried fields like <code>email</code>, <code>venueId</code>, and <code>userId</code> to speed up lookups.</li> </ul>"},{"location":"system%20design/database-design/#logging-with-winston","title":"\ud83d\udccc Logging with Winston","text":"<p>Logs are a crucial part of monitoring system usage and debugging issues. Here's an example configuration for Winston logging:</p> <pre><code>const winston = require('winston');\n\n// Create a logger instance\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  transports: [\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/combined.log' }),\n    new winston.transports.Console({ format: winston.format.simple() })\n  ]\n});\n\n// Example of logging an error\nlogger.error('This is an error log');\n\n// Example of logging an info message\nlogger.info('User John Doe has successfully booked a venue.');\n</code></pre>"},{"location":"system%20design/database-design/#indexing-strategy-for-performance","title":"\ud83d\udccc Indexing Strategy for Performance","text":"Collection Field Type Purpose users <code>email</code> Unique Index To prevent duplicate emails and enable fast lookup orders <code>userId</code> Index To quickly find all orders by a specific user venue <code>status</code> Index To quickly find available venues logs <code>timestamp</code> Index To efficiently query logs by time"},{"location":"system%20design/database-design/#best-practices","title":"\ud83d\udccc Best Practices","text":"<ul> <li> <p>Normalization vs Denormalization:   For MongoDB, we use a denormalized approach to embed related documents when it makes sense (e.g., embedding venue info in orders).</p> </li> <li> <p>Data Duplication:   Although some data duplication might occur, it\u2019s important for performance reasons in MongoDB to reduce the need for complex joins.</p> </li> <li> <p>Backup &amp; Recovery:   Implement a strategy for database backups (daily or weekly) and ensure that your data is resilient to failures.</p> </li> </ul>"},{"location":"system%20design/database-design/#future-considerations","title":"\ud83d\udccc Future Considerations","text":"<p>As the system evolves, here are a few potential improvements:</p> <ul> <li>Adding a messaging queue for handling asynchronous operations like email notifications and processing payments.</li> <li>Implementing user authentication (JWT tokens) to securely manage users and their roles.</li> <li>Considering horizontal scaling and sharding in MongoDB for performance as the user base grows.</li> </ul>"},{"location":"system%20design/flow-diagram/","title":"\ud83d\udcca Flow Diagram","text":"<p>The following flow diagram provides a visual representation of the system's process flow, from user registration and venue booking to logging activities.</p> <p></p> <p>You can also access the image directly via this link.</p>"},{"location":"system%20design/flow-diagram/#flow-breakdown","title":"\ud83d\udccc Flow Breakdown","text":"<ol> <li>User Registration</li> <li>A new user registers by providing their personal information (e.g., name, email, phone, etc.).</li> <li>The system checks for duplicates (e.g., duplicate email).</li> <li> <p>Once verified, the user is created, and an activation email is sent.</p> </li> <li> <p>Login Process</p> </li> <li>After registration, the user logs in using their credentials (email and password).</li> <li>The system verifies credentials against the Users collection.</li> <li> <p>If successful, the user gains access to their dashboard.</p> </li> <li> <p>Venue Booking</p> </li> <li> <p>The user selects a venue from the available options.</p> </li> <li> <p>Scan User ID</p> </li> <li>Before proceeding with the order creation, the system scans the user\u2019s ID (e.g., user ID or a unique identifier).</li> <li>The system verifies that the user exists and is eligible for booking.</li> <li> <p>If the user is not found or is ineligible, an error message is displayed.</p> </li> <li> <p>Create Order</p> </li> <li>If the user ID is valid, the system proceeds to create an order with the selected venue details and the user's ID.</li> <li> <p>The system checks if the venue is available.</p> <ul> <li>If available, the order is created, and booking details are stored.</li> <li>If not available, the system notifies the user.</li> </ul> </li> <li> <p>Order Confirmation &amp; Logging</p> </li> <li>After the booking is confirmed, the order details are saved, and a confirmation email is sent to the user.</li> <li> <p>Every action in the system is logged using Winston for monitoring and debugging purposes (e.g., user actions, order creation).</p> </li> <li> <p>Admin Actions</p> </li> <li>Admins can view user data, manage venue information, and view bookings.</li> <li>Admin logs are captured for auditing purposes.</li> </ol>"},{"location":"system%20design/flow-diagram/#notes-on-flow","title":"\ud83d\udccc Notes on Flow","text":"<ul> <li>The Scan User ID step ensures that only registered users can make bookings and prevents unauthorized access.</li> <li>The flow is designed to ensure a smooth user experience, while the logging step captures all important actions for monitoring and debugging.</li> <li>The availability check before booking is crucial to avoid overbooking of venues.</li> </ul>"},{"location":"system%20design/flow-diagram/#future-improvements-to-the-flow","title":"\ud83d\udccc Future Improvements to the Flow","text":"<p>As the system scales, consider adding more steps such as:</p> <ul> <li>Real-time venue availability: Implementing a real-time availability feature.</li> <li>Role-based access control (RBAC): Different levels of access for employees and admins, allowing for more granular control of the system.</li> </ul>"},{"location":"system%20design/functional-requirements/","title":"Functional Requirements","text":"<p>This section outlines the functional requirements of the system, highlighting the goals and objectives the system aims to achieve. Below is a list of the functionalities the website will provide.</p> <p></p>"},{"location":"system%20design/functional-requirements/#user-management","title":"User Management","text":"<ul> <li>The user management system of KMS allows users to <code>log in</code> and <code>create accounts</code>. However, account creation will be managed by an admin.</li> </ul>"},{"location":"system%20design/functional-requirements/#search-and-discovery","title":"Search and Discovery","text":"<ul> <li>Users will be able to search for venues and orders on the website. They can filter venues based on <code>capacity</code>, <code>block</code>, and <code>name</code>.</li> </ul>"},{"location":"system%20design/functional-requirements/#venue-management","title":"Venue Management","text":"<ul> <li>Only admins will have the ability to <code>add</code>, <code>edit</code>, and <code>delete</code> venue details within the system.</li> </ul>"},{"location":"system%20design/functional-requirements/#order-management","title":"Order Management","text":"<ul> <li>Employees will be able to <code>create</code>, <code>edit</code>, <code>delete</code>, and <code>update</code> orders on the website.</li> </ul>"},{"location":"system%20design/functional-requirements/#fingerprint-management","title":"Fingerprint Management","text":"<ul> <li>When a student requests to create an order, their user card will be scanned to retrieve their information. This will determine whether the student is eligible to request a key.</li> </ul>"},{"location":"system%20design/non-functional-requirements/","title":"Non Functional Requirements(NFRs)","text":"<ul> <li>This section details into the non-functional requirements of the project take a graze into the picture below, but some of the things will be refined as a project gets bigger.</li> </ul>"},{"location":"system%20design/non-functional-requirements/#security","title":"Security","text":"<ul> <li>Implementation of the security into the website for securing the website using various methods such as using <code>jwt</code> json web token to secure the website also by using the jwt it ensures that after the user jas logs into the website we create a token each time a user has logged into a website to prevent user from common attacks, also the use of bcrpy library ofr securing the database whereby user data such as password are encrypted to prevent any attacks that might affect the performance of the website.</li> </ul>"},{"location":"system%20design/non-functional-requirements/#consistency","title":"Consistency","text":"<ul> <li> <p>By implementing common procedures into the project such as the use of common project structure by following the <code>MVC</code> pattern into the project also the use of <code>Njox  A-Z approach</code> into the project makes the project modular.</p> </li> <li> <p>project root</p> </li> </ul> <pre><code>\ud83d\udcc2 Project Root\n/apps\n|-- .github\n\u2502\u2500\u2500 /client        # Frontend (React)\n\u2502\u2500\u2500 /server        # Backend (Express &amp; MongoDB)\n\u2502\u2500\u2500 /infra\n\u2502\u2500\u2500 /public\n\u2502\u2500\u2500 /tests\n\u2502\u2500\u2500 /config        # Environment &amp; config files\n\u2502\u2500\u2500 /scripts       # Automation scripts (optional)\n\u2502\u2500\u2500 .gitignore\n\u2502\u2500\u2500 package.json\n\u2502\u2500\u2500 README.md\n\u2502\u2500\u2500 .env\n\u2502\u2500\u2500 Dockerfile\n</code></pre> <ul> <li>frontend</li> </ul> <pre><code>\ud83d\udda5 Frontend (React) Structure\n/client\n\u2502\u2500\u2500 /public         # Static assets (favicon, manifest)\n\u2502\u2500\u2500 /src\n\u2502   \u2502\u2500\u2500 /assets     # Images, icons, fonts, etc.\n\u2502   \u2502\u2500\u2500 /components # Reusable components\n\u2502   \u2502\u2500\u2500 /context    # Global state/context API\n\u2502   \u2502\u2500\u2500 /hooks      # Custom hooks\n\u2502   \u2502\u2500\u2500 /layouts    # Page layouts (Navbar, Sidebar)\n\u2502   \u2502\u2500\u2500 /pages      # Page components (Home, Dashboard)\n\u2502   \u2502\u2500\u2500 /routes     # App routing (React Router)\n\u2502   \u2502\u2500\u2500 /services   # API calls &amp; business logic\n\u2502   \u2502\u2500\u2500 /store      # Redux/Zustand store (if used)\n\u2502   \u2502\u2500\u2500 /utils      # Helper functions\n\u2502   \u2502\u2500\u2500 App.jsx     # Root component\n\u2502   \u2502\u2500\u2500 index.js    # React entry point\n\u2502\u2500\u2500 .env           # Frontend environment variables\n\u2502\u2500\u2500 package.json   # Frontend dependencies\n\u2502\u2500\u2500 vite.config.js # Vite config (if using Vite)\n</code></pre> <ul> <li>\ud83c\udf0d Backend (Express &amp; MongoDB) Structure</li> </ul> <pre><code>/server\n\u2502\u2500\u2500 /\n\u2502   \u2502\u2500\u2500 /config       # DB connection &amp; environment configs\n\u2502   \u2502\u2500\u2500 /controllers  # Business logic for API endpoints\n\u2502   \u2502\u2500\u2500 /middleware   # Authentication &amp; error handling\n\u2502   \u2502\u2500\u2500 /models       # Mongoose schemas &amp; models\n\u2502   \u2502\u2500\u2500 /routes       # Express route handlers\n\u2502   \u2502\u2500\u2500 /services     # External API calls, email, etc.\n\u2502   \u2502\u2500\u2500 /utils        # Utility functions\n\u2502   \u2502\u2500\u2500 app.js        # Express app setup\n\u2502   \u2502\u2500\u2500 server.js     # Server entry point\n\u2502\u2500\u2500 .env             # Backend environment variables\n\u2502\u2500\u2500 package.json     # Backend dependencies\n\u2502\u2500\u2500 nodemon.json     # Auto-restart config (for dev)\n</code></pre>"},{"location":"system%20design/non-functional-requirements/#maintainability","title":"Maintainability","text":"<ul> <li>By using the common folder structure into the project ensures the project is modular and easier for maintaining.</li> </ul>"},{"location":"system%20design/non-functional-requirements/#tabular","title":"tabular","text":""},{"location":"system%20design/non-functional-requirements/#non-functional-requirements","title":"Non-Functional Requirements","text":""},{"location":"system%20design/non-functional-requirements/#non-functional-requirements-nfrs","title":"Non-Functional Requirements (NFRs)","text":"<p>This document outlines the system's quality attributes, performance benchmarks, and operational constraints.</p>"},{"location":"system%20design/non-functional-requirements/#table-of-non-functional-requirements","title":"\ud83d\udccc Table of Non-Functional Requirements","text":"Category Requirement Expected Value Validation Method Tools Used Performance API Response Time &lt; 200ms per request Load Testing JMeter, k6 Performance Page Load Time &lt; 2s Lighthouse Audit Google Lighthouse, WebPageTest Scalability Concurrent Users Handle 1000+ users Stress Testing (Simulated Load) Locust, k6 Availability System Uptime 99.9% uptime Monitoring &amp; Alerts Grafana, Prometheus Security Data Encryption AES-256 for storage, TLS for transmission Security Audit OWASP ZAP, Burp Suite Security Authentication &amp; Authorization JWT &amp; OAuth 2.0 Penetration Testing OWASP ZAP, Postman Usability Mobile Responsiveness Fully responsive UI UI Testing BrowserStack, Percy Compliance GDPR Compliance User consent &amp; encryption Security Audit Manual Review, Compliance Checklists Maintainability Code Documentation Clear API &amp; system docs Manual Review MkDocs, Swagger Reliability Error Recovery Auto restart on failure System Logs &amp; Alerts ELK Stack, Sentry"},{"location":"system%20design/non-functional-requirements/#detailed-explanations","title":"\ud83d\udd0d Detailed Explanations","text":""},{"location":"system%20design/non-functional-requirements/#1-performance-requirements","title":"1. Performance Requirements","text":"<ul> <li>API Response Time: The system should handle API requests within 200ms under normal load conditions.  </li> <li>Page Load Time: The frontend must load in less than 2 seconds on a standard broadband connection.  </li> <li>Tools Used: We use JMeter for API performance testing and Google Lighthouse for page speed analysis.  </li> </ul>"},{"location":"system%20design/non-functional-requirements/#2-scalability-requirements","title":"2. Scalability Requirements","text":"<ul> <li>The system should scale to 1000+ concurrent users with auto-scaling enabled.  </li> <li>Load testing will be performed using Locust and k6.  </li> </ul>"},{"location":"system%20design/non-functional-requirements/#3-security-requirements","title":"3. Security Requirements","text":"<ul> <li>Data Encryption: All sensitive data must be encrypted using AES-256 at rest and TLS 1.2+ for transmission.  </li> <li>Authentication &amp; Authorization: Implement JWT-based authentication and OAuth 2.0 for secure access control.  </li> <li>Tools Used: We use OWASP ZAP and Burp Suite for security audits.  </li> </ul>"},{"location":"system%20design/non-functional-requirements/#4-availability-reliability","title":"4. Availability &amp; Reliability","text":"<ul> <li>System must maintain 99.9% uptime, with automatic failover for critical services.  </li> <li>Error logging &amp; monitoring will be handled using Sentry and ELK Stack (Elasticsearch, Logstash, Kibana).  </li> </ul>"},{"location":"system%20design/non-functional-requirements/#5-compliance-maintainability","title":"5. Compliance &amp; Maintainability","text":"<ul> <li>The system must be GDPR-compliant, ensuring user consent before data collection.  </li> <li>API documentation should be maintained using Swagger and system documentation with MkDocs.  </li> </ul>"},{"location":"system%20design/non-functional-requirements/#version-control-updates","title":"\ud83d\ude80 Version Control &amp; Updates","text":"<ul> <li>This document will be versioned using Git for tracking updates.  </li> <li>All changes will follow a review process before being approved.  </li> <li>Next review: [Insert Date] </li> </ul>"},{"location":"system%20design/non-functional-requirements/#where-to-find-this-document","title":"\ud83d\udcc2 Where to Find This Document?","text":"<ul> <li>\ud83d\udcc4 Location in MkDocs: <code>docs/system-design/non-functional-requirements.md</code> </li> <li>\ud83d\udee0 Live Version (if hosted): your-docs-site.com/nfr </li> </ul>"},{"location":"system%20design/non-functional-requirements/#why-this-format","title":"\ud83d\udd25 Why This Format?","text":"<p>\u2714 Markdown format keeps it lightweight and easy to version in Git. \u2714 Tables with tools &amp; validation make it actionable for devs &amp; testers. \u2714 Linking to relevant docs improves navigation in your MkDocs setup.  </p> <p>Would you like me to refine this further or generate a ready-to-use MkDocs file for your project? \ud83d\ude80</p>"},{"location":"system%20design/uml/","title":"UML Diagram","text":""},{"location":"system%20design/uml/#class","title":"Class","text":"<ul> <li>Into each uml diagram we have 3 classes which are <code>venue</code>, <code>users</code> and <code>venue</code>.</li> </ul>"}]}